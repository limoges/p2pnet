Interim Report 

1. Architecture
-------------------

1.1 What type of process architecture you have?
-----------------------------------------------

The modules are each running their own process. That "module process" follows a
common architecture which is as follow. The main thread of the module is launched
and is responsible for active decisions, such as, looking for bootstrapping peers,
exploring the network for new peers, etc...

Depending on the needs of the module, two other threads are launched. One thread
listens to API requests, the other listens to peer requests. These threads listen
for a new connexion and then immediately offload the handling of the connexion
to a working thread which often will handled a chain of actions (handshaking,
responding to a request, etc...).

1.2 Do you use event loops or not?
----------------------------------

There is no event loop per say. The listening threads are passive and listen to
new connexions, while the main thread would run at startup or on a timer.

2. Document the inter-module protocol

2.1 Explain the message formats in the protocol

Working on the Onion Forwarding/Authentication, there are only a few additionnal
messages to add to these modules for them to work properly.

Two messages that will be added are AUTH_HANDSHAKE1 and AUTH_HANDSHAKE2,
each serving the purpose of CLIENT HELLO and SERVER HELLO in TLS/SSL.

AUTH_HANDSHAKE_REQUEST is the handshake payload contained in AUTH_SESSION_HS1.

The format follows the general format proposed for messages and is as such:
0                              16                            32
+------------------------------+-----------------------------+
|          size                |  AUTH_HANDSHAKE_REQUEST     |
+------------------------------+-----------------------------+
|       Reserved               |             CipherSuite     |
+------------------------------+-----------------------------+
|     RSA PKCS1v15 Encrypted Symmetric Session Key           |
+------------------------------------------------------------+

AUTH_HANDSHAKE_RESPONSE is the handshake payload contained in AUTH_SESSION_HS2.

0                              16                            32
+------------------------------+-----------------------------+
|          size                |  AUTH_HANDSHAKE_RESPONSE    |
+------------------------------+-----------------------------+
|       Reserved               |    Selected CipherSuite     |
+------------------------------+-----------------------------+


2.2 How do your modules running on different peers authenticate?

My architecture involves having an additionnal module which simply routes
internal messages and external messages to the appropriate modules to simplify
the sharing of addresses. Every single message would then be sent through the
I/O module and then routed to the appropriate module based on type.

2.3 How does your protocol handle exceptions?

The protocol handles exceptions by resetting the session and restarting the
handshake/tunnel building.


